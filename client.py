import socket
import os
from RSA import generer_cles, chiffrer, trouver_premier, dechiffrer

def process_file(command, filepath, public, private, output_folder):
    with open(filepath, "r") as file:
        content = file.read().strip()

    if command == 'c':
        processed_content = ' '.join(map(str, chiffrer(public, content)))
        output_filename = f"crypted_{os.path.basename(filepath)}"
    elif command == 'd':
        content_nums = list(map(int, content.split()))
        processed_content = dechiffrer(private, content_nums)
        output_filename = f"decrypted_{os.path.basename(filepath).replace('crypted_', '')}"

    output_filepath = os.path.join(output_folder, output_filename)
    with open(output_filepath, "w") as file:
        file.write(processed_content)
    print(f"Le fichier '{os.path.basename(filepath)}' a été {command}é.")

def start_client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = ('localhost', 12345)
    input_folder = 'files'
    crypted_folder = 'crypted_folder'
    decrypted_folder = 'decrypted_folder'

    try:
        client_socket.connect(server_address)
        print("Connecté au serveur")

        p = trouver_premier(100, 300)
        q = trouver_premier(300, 500)
        public, private = generer_cles(p, q)

        while True:
            command = client_socket.recv(1024).decode()
            print(f"Commande reçue: {command}")

            if command == 'q':
                print("Fermeture de la connexion.")
                break
            if command == 'c':
                if not os.path.exists(crypted_folder):
                    os.makedirs(crypted_folder)
                folder_to_process = input_folder
                output_folder = crypted_folder
            elif command == 'd':
                if not os.path.exists(decrypted_folder):
                    os.makedirs(decrypted_folder)
                folder_to_process = crypted_folder
                output_folder = decrypted_folder
            else:
                print("Commande inconnue.")
                continue

            for filename in os.listdir(folder_to_process):
                filepath = os.path.join(folder_to_process, filename)
                process_file(command, filepath, public, private, output_folder)

            ack = f'ACK - {command.capitalize()} terminé'
            client_socket.send(ack.encode())

    except Exception as e:
        print(f"Erreur lors de la connexion au serveur: {e}")
    finally:
        client_socket.close()


start_client()
