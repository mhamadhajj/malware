import socket
import os
import time
from RSA import generer_cles, chiffrer, trouver_premier, dechiffrer

def send_file(client_socket, filepath):
    filename = os.path.basename(filepath)
    filesize = os.path.getsize(filepath)
    print("filename size : "f"{filename}|{filesize}".encode())
    client_socket.send(f"{filename}|{filesize}".encode())

    with open(filepath, 'rb') as file:
        bytes_read = file.read(1024)
        while bytes_read:
            client_socket.sendall(bytes_read)
            bytes_read = file.read(1024)
    file.close()
    print(f"Le fichier '{filename}' a été envoyé au serveur.")
    

def process_file(command, filepath, public, private):
    with open(filepath, "r") as file:
        content = file.read().strip()

    if command == 'c':
        processed_content = ' '.join(map(str, chiffrer(public, content)))
    elif command == 'd':
        content_nums = list(map(int, content.split()))
        processed_content = dechiffrer(private, content_nums)

    with open(filepath, "w") as file:
        file.write(processed_content)
    print(f"Le fichier '{os.path.basename(filepath)}' a été {command}é.")
    
    return filepath

def start_client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = ('localhost', 12345)
    client_socket.connect(server_address)
    print("Connecté au serveur")

    p = trouver_premier(100, 300)
    q = trouver_premier(300, 500)
    public, private = generer_cles(p, q)
    while True:
        response = client_socket.recv(1024).decode()
        command, folder_path = response.split(',', 1)
        if command in ['q']:
            break
        print(f"Commande reçue: {command}, chemin du dossier: {folder_path}")

        if command in ['c', 'd']:
            for filename in os.listdir(folder_path):
                filepath = os.path.join(folder_path, filename)
                processed_filepath = process_file(command, filepath, public, private)
                send_file(client_socket, processed_filepath)
                time.sleep(0.5)
                client_socket.send("FILE_SENT".encode()) 
                while True:
                    response = client_socket.recv(1024).decode()
                    if response== "reçu":
                        break
            client_socket.send("END_OF_FILES".encode())  # Signal de fin d'envoi
        else:
             print("Commande inconnue.")
    client_socket.close()

start_client()