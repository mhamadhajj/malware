import socket
import os
from RSA import generer_cles, trouver_premier, inverse_modulaire,est_premier

def receive_file(connection):
    while True:
        file_info = connection.recv(1024).decode()
        print("response : ",file_info)
        if file_info == "END_OF_FILES" or file_info == "":
            print("Tous les fichiers ont été reçus pour cette commande.")
            break

        filename, filesize = file_info.split('|')
        filesize = int(filesize)
        
        if not os.path.exists('received_files'):
            os.makedirs('received_files')
        
        output_filepath = os.path.join('received_files', filename)
        total_received = 0

        with open(output_filepath, 'wb') as file:
            while total_received < filesize:
                data = connection.recv(1024)
                if not data:
                    break
                file.write(data)
                total_received += len(data)
        while True:
            ack = connection.recv(1024).decode()
            if ack=="FILE_SENT":
                connection.send("reçu".encode())
                break
        print(f"Le fichier {filename} a été reçu et enregistré. Taille: {total_received} bytes.")

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = ('localhost', 12345)
    server_socket.bind(server_address)
    server_socket.listen(1)
    p = trouver_premier(100, 300)
    q = trouver_premier(300, 500)
    public, private = generer_cles(p, q)
    print("Le serveur écoute sur le port 12345")
   
    while True:
        print("En attente de connexion client...")
        connection, client_address = server_socket.accept()
        try:
            print(f"Connecté à {client_address}")
            while True:
                command = input("Entrer la commande : 'c' (crypter), 'd' (décrypter) ou 'q' (quitter): ")
                if command == 'q':
                    connection.send(f"{command},exit,exit ".encode())
                    break
                elif command in ['c']:
                    connection.send(f"{command},{'/tmp/files'},{public}".encode())
                    receive_file(connection)
                elif command in ['d']:
                    connection.send(f"{command},{'/tmp/files'},{private}".encode())
                    receive_file(connection)
        finally:
                connection.close()
                print("Connexion fermée.")

    server_socket.close()
    print("Serveur arrêté.")

start_server()
